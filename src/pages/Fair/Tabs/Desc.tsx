import React from 'react';

import { Flex, Text } from 'components';
import { StyledLink } from 'pages/Help/styles';
import styled from 'styled-components';

const Desc: React.FC = () => {
  return (
    <Flex flexDirection="column" gap={54}>
      <Flex flexDirection="column" gap={20}>
        <Text fontSize="18px" lineHeight="22px" fontWeight={600} color="white">
          PROVABLY FAIR
        </Text>
        <Text fontSize="16px" lineHeight="21px" color="#96A8C2">
          <p>
            Whenever random number generation (RNG) is required, the DUEL
            platform uses RANDOM.ORG to generate the random numbers in a process
            that is transparent and provably fair.
          </p>
          <p>
            Random.org offers true random values to anyone through their API.
            Users are issued tickets and use the ticket to generate random
            numbers or strings. Anyone can audit and verify the status of a
            ticket as they are always discoverable here. This{' '}
            <StyledLink
              href="https://random.org/"
              rel="noreferrer"
              target={'_blank'}
            >
              random.org
            </StyledLink>{' '}
            feature allows us to prove the fairness of the game results.
          </p>
          <p>
            When a game is created on the DUEL platform, we issue a random.org
            ticket through the random.org API. We then generate the random
            values corresponding with that ticket when the game has ended. At no
            point can DUEL control the generated random value. The generated
            random value can only be generated by the ticket, which allows this
            process to obtain true random status.
          </p>
          <p>
            With this system, anyone is able to verify:
            <br />
            1. Whether the ticket was used to generate random values after the
            game ends. <br />
            2. The random value generated by the ticket. <br />
            3. Whether the result of the game matches with the result calculated
            by the random value and provided code snippet. <br />
          </p>
          <p>
            For example,{' '}
            <StyledLink
              href="https://api.random.org/tickets/form?ticket=21349c0c5472cb80"
              rel="noreferrer"
              target={'_blank'}
            >
              here
            </StyledLink>{' '}
            is an example of a ticket which has not been used yet. <br />
            And{' '}
            <StyledLink
              href="https://api.random.org/tickets/form?ticket=5c8166391c37865e"
              rel="noreferrer"
              target={'_blank'}
            >
              here
            </StyledLink>{' '}
            is the example of a used ticket, which generated the random string
            “azIEfVgM`9”
          </p>
        </Text>
      </Flex>
      {/* <Flex flexDirection="column" gap={20}>
        <Text fontSize="18px" lineHeight="22px" fontWeight={600} color="white">
          Algorithm
        </Text>
        <Text fontSize="16px" lineHeight="21px" color="#96A8C2">
          <p>
            At the beginning of each Jackpot round, a new 32-byte seed is
            randomly chosen. The seed is kept private until the Jackpot is
            drawn, but its hash is calculated using the BLAKE2b hash function
            with a digest size of 256 bits and published before any bets are
            made.
          </p>
          <p>
            After the target Ethereum block is mined and its hash is known, the
            Jackpot winner is drawn from the users who have placed bets with
            following algorithm. First, the Jackpot outcome is determined by
            taking the 256 bit BLAKE2b hash of the secret concatenated with the
            block hash and converting the first 8 bytes of that hash to a
            floating point number between 0 and 1.
          </p>
          <p>
            The winning bet is then determined by multiplying the outcome number
            by the sum of all bet values and finding the first bet whose
            cumulative summed value exceeds this amount. To maintain
            deterministic outcomes, the bets are first sorted by user_id.
          </p>
        </Text>
      </Flex> */}
    </Flex>
  );
};

export default React.memo(Desc);
